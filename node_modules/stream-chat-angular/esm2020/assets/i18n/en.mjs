export const en = {
    streamChat: {
        '1 reply': '1 reply',
        'Attach files': 'Attach files',
        Cancel: 'Cancel',
        'Channel Missing': 'Channel Missing',
        Close: 'Close',
        'Close emoji picker': 'Close emoji picker',
        'Commands matching': 'Commands matching',
        'Connection failure, reconnecting now...': 'Connection failure, reconnecting now...',
        Delete: 'Delete',
        Delivered: 'Delivered',
        'Edit Message': 'Edit Message',
        'Edit message request failed': 'Edit message request failed',
        'Emoji matching': 'Emoji matching',
        'Empty message...': 'Empty message...',
        'Error adding flag': 'Error adding flag',
        'Error connecting to chat, refresh the page to try again.': 'Error connecting to chat, refresh the page to try again',
        'Error deleting message': 'Error deleting message',
        'Error loading reactions': 'Error loading reactions',
        'Error muting a user ...': 'Error muting a user ...',
        'Error pinning message': 'Error pinning message',
        'Error removing message pin': 'Error removing message pin',
        'Error unmuting a user ...': 'Error unmuting a user ...',
        'Error uploading file': 'Error uploading file "{{ name }}"',
        'Error uploading file, maximum file size exceeded': 'Error uploading "{{ name }}", maximum file size {{ limit }} exceeded',
        'Error uploading file, extension not supported': 'Error uploading "{{ name }}", type {{ ext }} not supported',
        'Error deleting attachment': 'Error deleting attachment',
        'Error ¬∑ Unsent': "Message couldn't be sent",
        'Error: {{ errorMessage }}': 'Error: {{ errorMessage }}',
        Flag: 'Flag',
        'Message Failed': 'Message Failed',
        'Message Failed ¬∑ Unauthorized': 'Unauthorized to send message',
        'Message Failed ¬∑ Click to try again': "Message couldn't be sent, click to try again",
        'Message deleted': 'Message deleted',
        'Message has been successfully flagged': 'Message has been successfully flagged',
        'Message pinned': 'Message pinned',
        'Message unpinned': 'Message unpinned',
        Mute: 'Mute',
        New: 'New',
        'New Messages!': 'New Messages!',
        'No results found': 'No results found',
        'Nothing yet...': 'Nothing yet...',
        'Only visible to you': 'Only visible to you',
        'Open emoji picker': 'Open emoji picker',
        'People matching': 'People matching',
        'Pick your emoji': 'Pick your emoji',
        Pin: 'Pin',
        'Pinned by': 'Pinned by',
        Reply: 'Quote Reply',
        'Reply to Message': 'Reply to Message',
        Search: 'Search',
        'Searching...': 'Searching...',
        Send: 'Send',
        'Send message request failed': 'Send message request failed',
        'Sending...': 'Sending...',
        'Slow Mode ON': 'Slow Mode ON',
        'Start of a new thread': 'Start of a new thread',
        'This message was deleted...': 'This message was deleted...',
        Thread: 'Thread reply',
        'Type your message': 'Type your message',
        Unmute: 'Unmute',
        Unpin: 'Unpin',
        'Wait until all attachments have uploaded': 'Wait until all attachments have uploaded',
        'You have no channels currently': 'You have no channels currently',
        "You've reached the maximum number of files": "You've reached the maximum number of files",
        live: 'live',
        'this content could not be displayed': 'this content could not be displayed',
        '{{ commaSeparatedUsers }} and {{ moreCount }} more': '{{ commaSeparatedUsers }} and {{ moreCount }} more',
        '{{ commaSeparatedUsers }}, and {{ lastUser }}': '{{ commaSeparatedUsers }}, and {{ lastUser }}',
        '{{ firstUser }} and {{ secondUser }}': '{{ firstUser }} and {{ secondUser }}',
        '{{ imageCount }} more': '{{ imageCount }} more',
        '{{ memberCount }} members': '{{ memberCount }} members',
        '{{ replyCount }} replies': '{{ replyCount }} replies',
        '{{ user }} has been muted': '{{ user }} has been muted',
        '{{ user }} has been unmuted': '{{ user }} has been unmuted',
        '{{ watcherCount }} online': '{{ watcherCount }} online',
        'üèô Attachment...': 'üèô Attachment...',
        'Connection error': 'Connection error',
        'Load more': 'Load more',
        failed: 'failed',
        retry: 'retry',
        test: 'success',
        'Sending links is not allowed in this conversation': 'Sending links is not allowed in this conversation',
        "You can't send messages in this channel": "You can't send messages in this channel",
        "You can't send thread replies in this channel": "You can't send thread replies in this channel",
        'Message not found': 'Message not found',
        'No chats here yet‚Ä¶': 'No chats here yet‚Ä¶',
        'user is typing': '{{ user }} is typing',
        'users are typing': '{{ users }} are typing',
        'Error loading channels': 'Error loading channels',
        'See original (automatically translated)': 'See original (automatically translated)',
        'See translation': 'See translation',
        'Mark as unread': 'Mark as unread',
        'Error marking message as unread': 'Error marking message as unread',
        'Error, only the first {{count}} message can be marked as unread': 'Error, only the first {{count}} message can be marked as unread',
        'Unread messages': 'Unread messages',
        '{{count}} unread messages': '{{count}} unread messages',
        '{{count}} unread message': '{{count}} unread message',
        'This message did not meet our content guidelines': 'This message did not meet our content guidelines',
        'Send Anyway': 'Send Anyway',
        Edited: 'Edited',
        'Error playing audio': 'Error playing audio',
        'Copy text': 'Copy text',
    },
};
//# sourceMappingURL=data:application/json;base64,