import { Component, EventEmitter, HostBinding, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../channel.service";
import * as i2 from "../../chat-client.service";
import * as i3 from "../../transliteration.service";
import * as i4 from "../emoji-input.service";
import * as i5 from "../../custom-templates.service";
import * as i6 from "../../theme.service";
import * as i7 from "@angular/common";
import * as i8 from "angular-mentions";
import * as i9 from "../../avatar-placeholder/avatar-placeholder.component";
import * as i10 from "@ngx-translate/core";
/**
 * The `AutocompleteTextarea` component is used by the [`MessageInput`](./MessageInputComponent.mdx) component to display the input HTML element where users can type their message.
 */
export class AutocompleteTextareaComponent {
    constructor(channelService, chatClientService, transliterationService, emojiInputService, customTemplatesService, themeService, cdRef) {
        this.channelService = channelService;
        this.chatClientService = chatClientService;
        this.transliterationService = transliterationService;
        this.emojiInputService = emojiInputService;
        this.customTemplatesService = customTemplatesService;
        this.themeService = themeService;
        this.cdRef = cdRef;
        this.class = 'str-chat__textarea str-chat__message-textarea-angular-host';
        /**
         * The value of the input HTML element.
         */
        this.value = '';
        /**
         * Placeholder of the textarea
         */
        this.placeholder = '';
        /**
         * If true, users can mention other users in messages. You can also set this input on the [`MessageInput`](./MessageInputComponent.mdx/#inputs-and-outputs) component.
         */
        this.areMentionsEnabled = true;
        /**
         * The scope for user mentions, either members of the current channel of members of the application. You can also set this input on the [`MessageInput`](./MessageInputComponent.mdx/#inputs-and-outputs) component.
         */
        this.mentionScope = 'channel';
        /**
         * Enables or disables auto focus on the textarea element
         */
        this.autoFocus = true;
        /**
         * Emits the current value of the input element when a user types.
         */
        this.valueChange = new EventEmitter();
        /**
         * Emits when a user triggers a message send event (this happens when they hit the `Enter` key).
         */
        this.send = new EventEmitter();
        /**
         * Emits the array of users that are mentioned in the message, it is updated when a user mentions a new user or deletes a mention.
         */
        this.userMentions = new EventEmitter();
        this.autocompleteKey = 'autocompleteLabel';
        this.mentionTriggerChar = '@';
        this.commandTriggerChar = '/';
        this.autocompleteConfig = {
            mentions: [],
        };
        this.subscriptions = [];
        this.mentionedUsers = [];
        this.userMentionConfig = {
            triggerChar: this.mentionTriggerChar,
            dropUp: true,
            labelKey: this.autocompleteKey,
            returnTrigger: true,
            mentionFilter: (searchString, items) => this.filter(searchString, items),
            mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar),
        };
        this.slashCommandConfig = {
            triggerChar: this.commandTriggerChar,
            dropUp: true,
            labelKey: 'name',
            returnTrigger: true,
            mentionFilter: (searchString, items) => this.filter(searchString, items),
            mentionSelect: (item, triggerChar) => this.itemSelectedFromAutocompleteList(item, triggerChar),
        };
        this.searchTerm$ = new BehaviorSubject('');
        this.isViewInited = false;
        this.searchTerm$.pipe(debounceTime(300)).subscribe((searchTerm) => {
            if (searchTerm.startsWith(this.mentionTriggerChar)) {
                void this.updateMentionOptions(searchTerm);
            }
        });
        this.subscriptions.push(this.channelService.activeChannel$.subscribe((channel) => {
            const commands = channel?.getConfig()?.commands || [];
            this.slashCommandConfig.items = commands.map((c) => ({
                ...c,
                [this.autocompleteKey]: c.name,
                type: 'command',
            }));
            this.mentionedUsers = [];
            this.userMentions.next([...this.mentionedUsers]);
            void this.updateMentionOptions(this.searchTerm$.getValue());
        }));
        this.subscriptions.push(this.emojiInputService.emojiInput$.subscribe((emoji) => {
            this.messageInput.nativeElement.focus();
            const { selectionStart } = this.messageInput.nativeElement;
            this.messageInput.nativeElement.setRangeText(emoji);
            this.messageInput.nativeElement.selectionStart =
                selectionStart + emoji.length;
            this.messageInput.nativeElement.selectionEnd =
                selectionStart + emoji.length;
            this.inputChanged();
        }));
        this.subscriptions.push(this.customTemplatesService.mentionAutocompleteItemTemplate$.subscribe((template) => (this.mentionAutocompleteItemTemplate = template)));
        this.subscriptions.push(this.customTemplatesService.commandAutocompleteItemTemplate$.subscribe((template) => (this.commandAutocompleteItemTemplate = template)));
        this.autocompleteConfig.mentions = [
            this.userMentionConfig,
            this.slashCommandConfig,
        ];
    }
    ngOnChanges(changes) {
        if (changes.areMentionsEnabled) {
            if (this.areMentionsEnabled) {
                this.autocompleteConfig.mentions = [
                    this.userMentionConfig,
                    this.slashCommandConfig,
                ];
                this.autocompleteConfig = { ...this.autocompleteConfig };
            }
            else {
                this.autocompleteConfig.mentions = [this.slashCommandConfig];
                this.autocompleteConfig = { ...this.autocompleteConfig };
            }
        }
        if (changes.mentionScope) {
            void this.updateMentionOptions(this.searchTerm$.getValue());
        }
        if (changes.value && !this.value && this.messageInput) {
            this.messageInput.nativeElement.style.height = 'auto';
            this.updateMentionedUsersFromText();
        }
        else if (changes.value &&
            this.value &&
            this.messageInput &&
            this.isViewInited) {
            setTimeout(() => {
                if (this.messageInput.nativeElement.scrollHeight > 0) {
                    this.adjustTextareaHeight();
                }
            }, 0);
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
        if (this.messageInput.nativeElement.scrollHeight > 0) {
            this.adjustTextareaHeight();
        }
    }
    filter(searchString, items) {
        return items.filter((item) => this.transliterate(item.autocompleteLabel.toLowerCase()).includes(this.transliterate(searchString.toLowerCase())));
    }
    itemSelectedFromAutocompleteList(item, triggerChar = '') {
        if (triggerChar === this.mentionTriggerChar) {
            this.mentionedUsers.push((item.user ? item.user : item));
            this.userMentions.next([...this.mentionedUsers]);
        }
        return triggerChar + item.autocompleteLabel + ' ';
    }
    autcompleteSearchTermChanged(searchTerm) {
        if (searchTerm === this.mentionTriggerChar) {
            void this.updateMentionOptions();
        }
        else {
            this.searchTerm$.next(searchTerm);
        }
    }
    inputChanged() {
        this.valueChange.emit(this.messageInput.nativeElement.value);
        this.adjustTextareaHeight();
    }
    inputLeft() {
        this.updateMentionedUsersFromText();
    }
    enterHit(event) {
        if (this.inputMode === 'desktop') {
            event.preventDefault();
            this.updateMentionedUsersFromText();
            this.send.next();
        }
    }
    adjustTextareaHeight() {
        this.messageInput.nativeElement.style.height = '';
        this.messageInput.nativeElement.style.height = `${this.messageInput.nativeElement.scrollHeight}px`;
    }
    transliterate(s) {
        if (this.transliterationService) {
            return this.transliterationService.transliterate(s);
        }
        else {
            return s;
        }
    }
    async updateMentionOptions(searchTerm) {
        if (!this.areMentionsEnabled) {
            return;
        }
        searchTerm = searchTerm?.replace(this.mentionTriggerChar, '');
        const request = this.mentionScope === 'application'
            ? (s) => this.chatClientService.autocompleteUsers(s)
            : (s) => this.channelService.autocompleteMembers(s);
        const result = await request(searchTerm || '');
        const items = this.filter(searchTerm || '', result.map((i) => {
            const user = (i.user ? i.user : i);
            return {
                ...i,
                autocompleteLabel: user.name || user.id,
                type: 'mention',
            };
        }));
        this.userMentionConfig.items = items;
        this.autocompleteConfig.mentions = [
            this.userMentionConfig,
            this.slashCommandConfig,
        ];
        this.autocompleteConfig = { ...this.autocompleteConfig };
        this.cdRef.detectChanges();
    }
    updateMentionedUsersFromText() {
        const updatedMentionedUsers = [];
        this.mentionedUsers.forEach((u) => {
            const key = u.name || u.id;
            if (this.value.includes(`${this.mentionTriggerChar}${key}`)) {
                updatedMentionedUsers.push(u);
            }
        });
        if (updatedMentionedUsers.length !== this.mentionedUsers.length) {
            this.userMentions.next([...updatedMentionedUsers]);
            this.mentionedUsers = updatedMentionedUsers;
        }
    }
}
AutocompleteTextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AutocompleteTextareaComponent, deps: [{ token: i1.ChannelService }, { token: i2.ChatClientService }, { token: i3.TransliterationService }, { token: i4.EmojiInputService }, { token: i5.CustomTemplatesService }, { token: i6.ThemeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
AutocompleteTextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: AutocompleteTextareaComponent, selector: "stream-autocomplete-textarea", inputs: { value: "value", placeholder: "placeholder", areMentionsEnabled: "areMentionsEnabled", inputMode: "inputMode", mentionScope: "mentionScope", autoFocus: "autoFocus" }, outputs: { valueChange: "valueChange", send: "send", userMentions: "userMentions" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "messageInput", first: true, predicate: ["input"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<textarea\n  #input\n  data-testid=\"textarea\"\n  class=\"\n    rta__textarea\n    str-chat__textarea__textarea\n    str-chat__angular-textarea\n    str-chat__message-textarea\n  \"\n  rows=\"1\"\n  [value]=\"value || ''\"\n  [autofocus]=\"autoFocus\"\n  placeholder=\"{{ placeholder | translate }}\"\n  [mentionConfig]=\"autocompleteConfig\"\n  [mentionListTemplate]=\"autocompleteItem\"\n  (input)=\"inputChanged()\"\n  (keydown.enter)=\"enterHit($event)\"\n  (searchTerm)=\"autcompleteSearchTermChanged($event)\"\n  (blur)=\"inputLeft()\"\n></textarea>\n<ng-template #autocompleteItem let-item=\"item\">\n  <div class=\"rta rta__item str-chat__emojisearch__item\" [ngSwitch]=\"item.type\">\n    <div *ngSwitchCase=\"'mention'\" class=\"rta__entity\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          mentionAutocompleteItemTemplate || defaultMentionTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n    <div *ngSwitchCase=\"'command'\" class=\"rta__entity\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          commandAutocompleteItemTemplate || defaultCommandTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultCommandTemplate let-item=\"item\">\n  <div class=\"str-chat__slash-command\">\n    <span class=\"str-chat__slash-command-header\">\n      <strong\n        class=\"str-chat__slash-command-name\"\n        data-testclass=\"command-name\"\n        >{{ item.name }}</strong\n      >\n      <span class=\"str-chat__slash-command-args\"\n        >/{{ item.name }} {{ item.args }}</span\n      >\n    </span>\n    <br />\n  </div>\n</ng-template>\n\n<ng-template #defaultMentionTemplate let-item=\"item\">\n  <div class=\"str-chat__user-item\">\n    <stream-avatar-placeholder\n      data-testclass=\"avatar\"\n      class=\"str-chat__avatar str-chat__avatar--circle\"\n      type=\"user\"\n      location=\"autocomplete-item\"\n      [imageUrl]=\"item.image || item.user?.image\"\n      [name]=\"item.autocompleteLabel\"\n      [user]=\"item.user || item\"\n    ></stream-avatar-placeholder>\n    <span data-testclass=\"username\" class=\"str-chat__user-item--name\">{{\n      item.autocompleteLabel\n    }}</span>\n  </div>\n</ng-template>\n", dependencies: [{ kind: "directive", type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i7.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i7.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i8.MentionDirective, selector: "[mention], [mentionConfig]", inputs: ["mentionConfig", "mention", "mentionListTemplate"], outputs: ["searchTerm", "itemSelected", "opened", "closed"] }, { kind: "component", type: i9.AvatarPlaceholderComponent, selector: "stream-avatar-placeholder", inputs: ["name", "imageUrl", "location", "channel", "user", "type", "initialsType", "showOnlineIndicator"] }, { kind: "pipe", type: i10.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AutocompleteTextareaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-autocomplete-textarea', template: "<textarea\n  #input\n  data-testid=\"textarea\"\n  class=\"\n    rta__textarea\n    str-chat__textarea__textarea\n    str-chat__angular-textarea\n    str-chat__message-textarea\n  \"\n  rows=\"1\"\n  [value]=\"value || ''\"\n  [autofocus]=\"autoFocus\"\n  placeholder=\"{{ placeholder | translate }}\"\n  [mentionConfig]=\"autocompleteConfig\"\n  [mentionListTemplate]=\"autocompleteItem\"\n  (input)=\"inputChanged()\"\n  (keydown.enter)=\"enterHit($event)\"\n  (searchTerm)=\"autcompleteSearchTermChanged($event)\"\n  (blur)=\"inputLeft()\"\n></textarea>\n<ng-template #autocompleteItem let-item=\"item\">\n  <div class=\"rta rta__item str-chat__emojisearch__item\" [ngSwitch]=\"item.type\">\n    <div *ngSwitchCase=\"'mention'\" class=\"rta__entity\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          mentionAutocompleteItemTemplate || defaultMentionTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n    <div *ngSwitchCase=\"'command'\" class=\"rta__entity\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          commandAutocompleteItemTemplate || defaultCommandTemplate;\n          context: { item: item }\n        \"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #defaultCommandTemplate let-item=\"item\">\n  <div class=\"str-chat__slash-command\">\n    <span class=\"str-chat__slash-command-header\">\n      <strong\n        class=\"str-chat__slash-command-name\"\n        data-testclass=\"command-name\"\n        >{{ item.name }}</strong\n      >\n      <span class=\"str-chat__slash-command-args\"\n        >/{{ item.name }} {{ item.args }}</span\n      >\n    </span>\n    <br />\n  </div>\n</ng-template>\n\n<ng-template #defaultMentionTemplate let-item=\"item\">\n  <div class=\"str-chat__user-item\">\n    <stream-avatar-placeholder\n      data-testclass=\"avatar\"\n      class=\"str-chat__avatar str-chat__avatar--circle\"\n      type=\"user\"\n      location=\"autocomplete-item\"\n      [imageUrl]=\"item.image || item.user?.image\"\n      [name]=\"item.autocompleteLabel\"\n      [user]=\"item.user || item\"\n    ></stream-avatar-placeholder>\n    <span data-testclass=\"username\" class=\"str-chat__user-item--name\">{{\n      item.autocompleteLabel\n    }}</span>\n  </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ChannelService }, { type: i2.ChatClientService }, { type: i3.TransliterationService }, { type: i4.EmojiInputService }, { type: i5.CustomTemplatesService }, { type: i6.ThemeService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { class: [{
                type: HostBinding
            }], value: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], areMentionsEnabled: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], mentionScope: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], send: [{
                type: Output
            }], userMentions: [{
                type: Output
            }], messageInput: [{
                type: ViewChild,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,