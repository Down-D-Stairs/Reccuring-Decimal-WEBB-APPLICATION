import { Component, EventEmitter, HostBinding, Input, Output, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../emoji-input.service";
import * as i2 from "../../theme.service";
import * as i3 from "@ngx-translate/core";
/**
 * The `Textarea` component is used by the [`MessageInput`](./MessageInputComponent.mdx) component to display the input HTML element where users can type their message.
 */
export class TextareaComponent {
    constructor(emojiInputService, themeService) {
        this.emojiInputService = emojiInputService;
        this.themeService = themeService;
        this.class = 'str-chat__textarea str-chat__message-textarea-angular-host';
        /**
         * The value of the input HTML element.
         */
        this.value = '';
        /**
         * Placeholder of the textarea
         */
        this.placeholder = '';
        /**
         * Enables or disables auto focus on the textarea element
         */
        this.autoFocus = true;
        /**
         * Emits the current value of the input element when a user types.
         */
        this.valueChange = new EventEmitter();
        /**
         * Emits when a user triggers a message send event (this happens when they hit the `Enter` key).
         */
        this.send = new EventEmitter();
        this.subscriptions = [];
        this.isViewInited = false;
        this.subscriptions.push(this.emojiInputService.emojiInput$.subscribe((emoji) => {
            this.messageInput.nativeElement.focus();
            const { selectionStart } = this.messageInput.nativeElement;
            this.messageInput.nativeElement.setRangeText(emoji);
            this.messageInput.nativeElement.selectionStart =
                selectionStart + emoji.length;
            this.messageInput.nativeElement.selectionEnd =
                selectionStart + emoji.length;
            this.inputChanged();
        }));
    }
    ngOnChanges(changes) {
        if (changes.value && !this.value && this.messageInput) {
            this.messageInput.nativeElement.style.height = 'auto';
        }
        else if (changes.value &&
            this.value &&
            this.messageInput &&
            this.isViewInited) {
            setTimeout(() => {
                if (this.messageInput.nativeElement.scrollHeight > 0) {
                    this.adjustTextareaHeight();
                }
            }, 0);
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
        if (this.messageInput.nativeElement.scrollHeight > 0) {
            this.adjustTextareaHeight();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((s) => s.unsubscribe());
    }
    inputChanged() {
        this.valueChange.emit(this.messageInput.nativeElement.value);
        this.adjustTextareaHeight();
    }
    enterHit(event) {
        if (this.inputMode === 'desktop') {
            event.preventDefault();
            this.send.next();
        }
    }
    adjustTextareaHeight() {
        this.messageInput.nativeElement.style.height = '';
        this.messageInput.nativeElement.style.height = `${this.messageInput.nativeElement.scrollHeight}px`;
    }
}
TextareaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: TextareaComponent, deps: [{ token: i1.EmojiInputService }, { token: i2.ThemeService }], target: i0.ɵɵFactoryTarget.Component });
TextareaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: TextareaComponent, selector: "stream-textarea", inputs: { value: "value", placeholder: "placeholder", inputMode: "inputMode", autoFocus: "autoFocus" }, outputs: { valueChange: "valueChange", send: "send" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "messageInput", first: true, predicate: ["input"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<textarea\n  #input\n  data-testid=\"textarea\"\n  class=\"\n    rta__textarea\n    str-chat__textarea__textarea\n    str-chat__angular-textarea\n    str-chat__message-textarea\n  \"\n  rows=\"1\"\n  [value]=\"value || ''\"\n  [autofocus]=\"autoFocus\"\n  placeholder=\"{{ placeholder | translate }}\"\n  (input)=\"inputChanged()\"\n  (keydown.enter)=\"enterHit($event)\"\n></textarea>\n", dependencies: [{ kind: "pipe", type: i3.TranslatePipe, name: "translate" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: TextareaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-textarea', template: "<textarea\n  #input\n  data-testid=\"textarea\"\n  class=\"\n    rta__textarea\n    str-chat__textarea__textarea\n    str-chat__angular-textarea\n    str-chat__message-textarea\n  \"\n  rows=\"1\"\n  [value]=\"value || ''\"\n  [autofocus]=\"autoFocus\"\n  placeholder=\"{{ placeholder | translate }}\"\n  (input)=\"inputChanged()\"\n  (keydown.enter)=\"enterHit($event)\"\n></textarea>\n" }]
        }], ctorParameters: function () { return [{ type: i1.EmojiInputService }, { type: i2.ThemeService }]; }, propDecorators: { class: [{
                type: HostBinding
            }], value: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], inputMode: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], send: [{
                type: Output
            }], messageInput: [{
                type: ViewChild,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,