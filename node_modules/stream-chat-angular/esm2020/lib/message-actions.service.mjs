import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./chat-client.service";
import * as i2 from "./notification.service";
import * as i3 from "./channel.service";
/**
 * The message actions service provides customization options for the [message actions](../../components/MessageActionsBoxComponent)
 */
export class MessageActionsService {
    constructor(chatClientService, notificationService, channelService) {
        this.chatClientService = chatClientService;
        this.notificationService = notificationService;
        this.channelService = channelService;
        /**
         * Default actions - these are the actions that are handled by the built-in component
         */
        this.defaultActions = [
            {
                actionName: 'react',
                isVisible: (enabledActions) => {
                    return enabledActions.indexOf('send-reaction') !== -1;
                },
            },
            {
                actionName: 'mark-unread',
                actionLabelOrTranslationKey: 'streamChat.Mark as unread',
                actionHandler: (message) => {
                    void this.channelService.markMessageUnread(message.id);
                },
                isVisible: (enabledActions, isMine, message) => enabledActions.indexOf('read-events') !== -1 && !message.parent_id,
            },
            {
                actionName: 'quote',
                actionLabelOrTranslationKey: 'streamChat.Reply',
                actionHandler: (message) => {
                    this.channelService.selectMessageToQuote(message);
                },
                isVisible: (enabledActions) => enabledActions.indexOf('quote-message') !== -1,
            },
            {
                actionName: 'thread-reply',
                actionLabelOrTranslationKey: 'streamChat.Thread',
                actionHandler: (message) => {
                    void this.channelService.setAsActiveParentMessage(message);
                },
                isVisible: (enabledActions, isMine, message) => enabledActions.indexOf('send-reply') !== -1 && !message.parent_id,
            },
            {
                actionName: 'pin',
                actionLabelOrTranslationKey: (message) => message.pinned ? 'streamChat.Unpin' : 'streamChat.Pin',
                actionHandler: (message) => {
                    message.pinned
                        ? void this.channelService.unpinMessage(message)
                        : void this.channelService.pinMessage(message);
                },
                isVisible: (enabledActions) => enabledActions.indexOf('pin-message') !== -1,
            },
            {
                actionName: 'flag',
                actionLabelOrTranslationKey: 'streamChat.Flag',
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                actionHandler: async (message) => {
                    try {
                        await this.chatClientService.flagMessage(message.id);
                        this.notificationService.addTemporaryNotification('streamChat.Message has been successfully flagged', 'success');
                    }
                    catch (err) {
                        this.notificationService.addTemporaryNotification('streamChat.Error adding flag');
                    }
                },
                isVisible: (enabledActions, isMine) => enabledActions.indexOf('flag-message') !== -1 && !isMine,
            },
            {
                actionName: 'edit',
                actionLabelOrTranslationKey: 'streamChat.Edit Message',
                actionHandler: (message) => {
                    this.messageToEdit$.next(message);
                },
                isVisible: (enabledActions, isMine) => (enabledActions.indexOf('update-own-message') !== -1 && isMine) ||
                    enabledActions.indexOf('update-any-message') !== -1,
            },
            {
                actionName: 'delete',
                actionLabelOrTranslationKey: 'streamChat.Delete',
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                actionHandler: async (message) => {
                    try {
                        await this.channelService.deleteMessage(message);
                    }
                    catch (error) {
                        this.notificationService.addTemporaryNotification('streamChat.Error deleting message');
                    }
                },
                isVisible: (enabledActions, isMine) => ((enabledActions.indexOf('delete') !== -1 ||
                    enabledActions.indexOf('delete-own-message') !== -1) &&
                    isMine) ||
                    enabledActions.indexOf('delete-any') !== -1 ||
                    enabledActions.indexOf('delete-any-message') !== -1,
            },
            {
                actionName: 'copy-message-text',
                actionLabelOrTranslationKey: 'streamChat.Copy text',
                isVisible: (_, __, message) => {
                    const isClipboardSupported = navigator?.clipboard?.write !== undefined;
                    if (!isClipboardSupported && !this.hasDisplayedClipboardWarning) {
                        console.warn(`[Stream Chat] Copy action is disabled because clipboard API isn't available, please check security and browser requirements: https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write#security_considerations`);
                        this.hasDisplayedClipboardWarning = true;
                    }
                    return (!!message.text &&
                        (message.type === 'regular' || message.type === 'reply') &&
                        isClipboardSupported);
                },
                actionHandler: (message, extraParams) => {
                    const fallbackContent = message.text || '';
                    // Android Chrome can only copy plain text: https://issues.chromium.org/issues/40851502
                    void navigator.clipboard.write([
                        new ClipboardItem({
                            'text/plain': new Blob([
                                extraParams.messageTextHtmlElement?.innerText ||
                                    fallbackContent,
                            ], { type: 'text/plain' }),
                            'text/html': new Blob([
                                extraParams.messageTextHtmlElement?.innerHTML ||
                                    fallbackContent,
                            ], { type: 'text/html' }),
                        }),
                    ]);
                },
            },
        ];
        /**
         * The built-in components will handle changes to this observable.
         */
        this.messageToEdit$ = new BehaviorSubject(undefined);
        /**
         * You can pass your own custom actions that will be displayed inside the built-in message actions component
         */
        this.customActions$ = new BehaviorSubject([]);
        this.hasDisplayedClipboardWarning = false;
        combineLatest([
            this.messageToEdit$,
            this.channelService.activeChannel$,
        ]).subscribe(([messageToEdit, activeChannel]) => {
            if (messageToEdit &&
                (!activeChannel || activeChannel?.cid !== messageToEdit.cid)) {
                this.messageToEdit$.next(undefined);
            }
        });
        combineLatest([
            this.messageToEdit$,
            this.channelService.activeParentMessageId$,
        ]).subscribe(([messageToEdit, parentMessageId]) => {
            if (messageToEdit &&
                messageToEdit.parent_id &&
                messageToEdit.parent_id !== parentMessageId) {
                this.messageToEdit$.next(undefined);
            }
        });
    }
    /**
     * This method returns how many authorized actions are available to the given message
     * @param message
     * @param enabledActions
     * @returns the count
     */
    getAuthorizedMessageActionsCount(message, enabledActions) {
        const customActions = this.customActions$.getValue() || [];
        const allActions = [...this.defaultActions, ...customActions];
        const currentUserId = this.chatClientService.chatClient.user?.id;
        const isMine = message.user_id === currentUserId;
        return allActions.filter((item) => item.isVisible(enabledActions, isMine, message)).length;
    }
}
MessageActionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageActionsService, deps: [{ token: i1.ChatClientService }, { token: i2.NotificationService }, { token: i3.ChannelService }], target: i0.ɵɵFactoryTarget.Injectable });
MessageActionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageActionsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageActionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ChatClientService }, { type: i2.NotificationService }, { type: i3.ChannelService }]; } });
//# sourceMappingURL=data:application/json;base64,