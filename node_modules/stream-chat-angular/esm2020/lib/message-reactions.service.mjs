import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * The `MessageReactionsService` provides customization options to message [reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript).
 *
 */
export class MessageReactionsService {
    constructor() {
        /**
         * The enabled [reactions](https://getstream.io/chat/docs/javascript/send_reaction/?language=javascript) and the associated emoji
         *
         * You can provide any string as a reaction. The emoji can be provided as a string, if you want to use custom images for reactions you have to provide a [custom reactions UI](../../services/CustomTemplatesService/#messagereactionstemplate)
         */
        this.reactions$ = new BehaviorSubject({
            haha: 'üòÇ',
            like: 'üëç',
            love: '‚ù§Ô∏è',
            sad: 'üòû',
            wow: 'üòÆ',
        });
    }
    /**
     * Sets the enabled reactions
     */
    set reactions(reactions) {
        this.reactions$.next(reactions);
    }
    /**
     * Get the currently enabled reactions
     */
    get reactions() {
        return this.reactions$.getValue();
    }
}
MessageReactionsService.…µfac = i0.…µ…µngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, deps: [], target: i0.…µ…µFactoryTarget.Injectable });
MessageReactionsService.…µprov = i0.…µ…µngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, providedIn: 'root' });
i0.…µ…µngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: MessageReactionsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS1yZWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3N0cmVhbS1jaGF0LWFuZ3VsYXIvc3JjL2xpYi9tZXNzYWdlLXJlYWN0aW9ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFFdkM7OztHQUdHO0FBSUgsTUFBTSxPQUFPLHVCQUF1QjtJQW9CbEM7UUFuQkE7Ozs7V0FJRztRQUNILGVBQVUsR0FBRyxJQUFJLGVBQWUsQ0FBMkM7WUFDekUsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsR0FBRyxFQUFFLElBQUk7WUFDVCxHQUFHLEVBQUUsSUFBSTtTQUNWLENBQUMsQ0FBQztJQVFZLENBQUM7SUFFaEI7O09BRUc7SUFDSCxJQUFJLFNBQVMsQ0FBQyxTQUFtRDtRQUMvRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7b0hBbENVLHVCQUF1Qjt3SEFBdkIsdUJBQXVCLGNBRnRCLE1BQU07MkZBRVAsdUJBQXVCO2tCQUhuQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VSZWFjdGlvbkNsaWNrRGV0YWlscywgTWVzc2FnZVJlYWN0aW9uVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogVGhlIGBNZXNzYWdlUmVhY3Rpb25zU2VydmljZWAgcHJvdmlkZXMgY3VzdG9taXphdGlvbiBvcHRpb25zIHRvIG1lc3NhZ2UgW3JlYWN0aW9uc10oaHR0cHM6Ly9nZXRzdHJlYW0uaW8vY2hhdC9kb2NzL2phdmFzY3JpcHQvc2VuZF9yZWFjdGlvbi8/bGFuZ3VhZ2U9amF2YXNjcmlwdCkuXG4gKlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVJlYWN0aW9uc1NlcnZpY2Uge1xuICAvKipcbiAgICogVGhlIGVuYWJsZWQgW3JlYWN0aW9uc10oaHR0cHM6Ly9nZXRzdHJlYW0uaW8vY2hhdC9kb2NzL2phdmFzY3JpcHQvc2VuZF9yZWFjdGlvbi8/bGFuZ3VhZ2U9amF2YXNjcmlwdCkgYW5kIHRoZSBhc3NvY2lhdGVkIGVtb2ppXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhbnkgc3RyaW5nIGFzIGEgcmVhY3Rpb24uIFRoZSBlbW9qaSBjYW4gYmUgcHJvdmlkZWQgYXMgYSBzdHJpbmcsIGlmIHlvdSB3YW50IHRvIHVzZSBjdXN0b20gaW1hZ2VzIGZvciByZWFjdGlvbnMgeW91IGhhdmUgdG8gcHJvdmlkZSBhIFtjdXN0b20gcmVhY3Rpb25zIFVJXSguLi8uLi9zZXJ2aWNlcy9DdXN0b21UZW1wbGF0ZXNTZXJ2aWNlLyNtZXNzYWdlcmVhY3Rpb25zdGVtcGxhdGUpXG4gICAqL1xuICByZWFjdGlvbnMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDx7IFtrZXkgaW4gTWVzc2FnZVJlYWN0aW9uVHlwZV06IHN0cmluZyB9Pih7XG4gICAgaGFoYTogJ/CfmIInLFxuICAgIGxpa2U6ICfwn5GNJyxcbiAgICBsb3ZlOiAn4p2k77iPJyxcbiAgICBzYWQ6ICfwn5ieJyxcbiAgICB3b3c6ICfwn5iuJyxcbiAgfSk7XG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBbYE1lc3NhZ2VSZWFjdGlvbnNDb21wb25lbnRgXSguLi8uLi9jb21wb25lbnRzL01lc3NhZ2VSZWFjdGlvbnNDb21wb25lbnQpIHdpbGwgZGlzcGxheSB0aGUgcmVhY3RpbmcgdXNlcnMgd2hlbiBhIHJlYWN0aW9uIGlzIGNsaWNrZWQuIFlvdSBjYW4gb3ZlcnJpZGUgdGhpcyB3aXRoIHlvdXIgb3duIFVJIGJ5IHByb3ZpZGluZyBhIGN1c3RvbSBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBUaGUgZXZlbnQgaGFuZGxlciBjYW4gcmV0cmlldmUgYWxsIHJlYWN0aW9ucyBvZiBhIG1lc3NhZ2UgaW5zaWRlIHRoZSBhY3RpdmUgY2hhbm5lbCB1c2luZyB0aGUgW2BjaGFubmVsU2VydmljZS5nZXRNZXNzYWdlUmVhY3Rpb25zYCBtZXRob2RdKC4uLy4uL3NlcnZpY2VzL0NoYW5uZWxTZXJ2aWNlLyNnZXRtZXNzYWdlcmVhY3Rpb25zKVxuICAgKi9cbiAgY3VzdG9tUmVhY3Rpb25DbGlja0hhbmRsZXI/OiAoZGV0YWlsczogTWVzc2FnZVJlYWN0aW9uQ2xpY2tEZXRhaWxzKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICAvKipcbiAgICogU2V0cyB0aGUgZW5hYmxlZCByZWFjdGlvbnNcbiAgICovXG4gIHNldCByZWFjdGlvbnMocmVhY3Rpb25zOiB7IFtrZXkgaW4gTWVzc2FnZVJlYWN0aW9uVHlwZV06IHN0cmluZyB9KSB7XG4gICAgdGhpcy5yZWFjdGlvbnMkLm5leHQocmVhY3Rpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnRseSBlbmFibGVkIHJlYWN0aW9uc1xuICAgKi9cbiAgZ2V0IHJlYWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdGlvbnMkLmdldFZhbHVlKCk7XG4gIH1cbn1cbiJdfQ==