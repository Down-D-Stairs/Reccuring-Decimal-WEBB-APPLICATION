import { Component, Input, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * This component can be used to visualize the wave bar of a voice recording
 */
export class VoiceRecordingWavebarComponent {
    constructor(ngZone, cdRef) {
        this.ngZone = ngZone;
        this.cdRef = cdRef;
        /**
         * The waveform data to visualize
         */
        this.waveFormData = [];
        this.resampledWaveFormData = [];
        this.progress = 0;
        this.isDragging = false;
        this.sampleSize = 40;
        this.isViewInited = false;
        this.upsample = () => {
            if (this.sampleSize === this.waveFormData.length)
                return this.waveFormData;
            // eslint-disable-next-line  prefer-const
            let [bucketSize, remainder] = this.divMod(this.sampleSize, this.waveFormData.length);
            const result = [];
            for (let i = 0; i < this.waveFormData.length; i++) {
                const extra = remainder && remainder-- ? 1 : 0;
                result.push(...Array(bucketSize + extra).fill(this.waveFormData[i]));
            }
            return result;
        };
        this.getNextBucketMean = (data, currentBucketIndex, bucketSize) => {
            const nextBucketStartIndex = Math.floor(currentBucketIndex * bucketSize) + 1;
            let nextNextBucketStartIndex = Math.floor((currentBucketIndex + 1) * bucketSize) + 1;
            nextNextBucketStartIndex =
                nextNextBucketStartIndex < data.length
                    ? nextNextBucketStartIndex
                    : data.length;
            return this.mean(data.slice(nextBucketStartIndex, nextNextBucketStartIndex));
        };
        this.mean = (values) => values.reduce((acc, value) => acc + value, 0) / values.length;
        this.triangleAreaHeron = (a, b, c) => {
            const s = (a + b + c) / 2;
            return Math.sqrt(s * (s - a) * (s - b) * (s - c));
        };
        this.triangleBase = (a, b) => Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
        this.divMod = (num, divisor) => {
            return [Math.floor(num / divisor), num % divisor];
        };
    }
    ngOnInit() {
        this.containerSizeChanged();
        if (this.container?.nativeElement) {
            this.ngZone.runOutsideAngular(() => {
                new ResizeObserver(() => {
                    this.containerSizeChanged();
                }).observe(this.container.nativeElement);
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.waveFormData) {
            this.resampledWaveFormData =
                this.waveFormData.length > this.sampleSize
                    ? this.downsample()
                    : this.upsample();
        }
        if (changes.audioElement) {
            this.ngZone.runOutsideAngular(() => {
                this.audioElement?.addEventListener('timeupdate', () => {
                    const progress = (this.audioElement?.currentTime || 0) / (this.duration || 0) || 0;
                    if (Math.abs(progress - this.progress) >= 0.02) {
                        this.ngZone.run(() => {
                            this.progress = progress;
                            this.cdRef.detectChanges();
                        });
                    }
                });
            });
        }
    }
    ngAfterViewInit() {
        this.isViewInited = true;
    }
    seek(event) {
        const containerWidth = this.container?.nativeElement?.getBoundingClientRect().width || 0;
        const containerStart = this.container?.nativeElement?.getBoundingClientRect()?.x || 0;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        const progress = (event.x - containerStart) / containerWidth;
        if (!isNaN(progress) && this.audioElement) {
            const duration = this.duration || 0;
            const time = duration * progress;
            this.audioElement.currentTime = time;
        }
    }
    trackByIndex(index) {
        return index;
    }
    containerSizeChanged() {
        if (!this.container?.nativeElement) {
            return;
        }
        const containerWidth = this.container.nativeElement.clientWidth;
        if (containerWidth === 0) {
            return;
        }
        const barWidth = +getComputedStyle(this.container.nativeElement)
            .getPropertyValue('--str-chat__voice-recording-amplitude-bar-width')
            .replace('px', '');
        const barGap = +getComputedStyle(this.container.nativeElement)
            .getPropertyValue('--str-chat__voice-recording-amplitude-bar-gap-width')
            .replace('px', '');
        if (!isNaN(barWidth) && !isNaN(barGap)) {
            const sampleSize = Math.floor(containerWidth / (barWidth + barGap));
            if (sampleSize !== this.sampleSize &&
                !isNaN(sampleSize) &&
                sampleSize !== Infinity) {
                this.ngZone.run(() => {
                    this.sampleSize = sampleSize;
                    this.resampledWaveFormData =
                        this.waveFormData.length > this.sampleSize
                            ? this.downsample()
                            : this.upsample();
                    if (this.isViewInited) {
                        this.cdRef.detectChanges();
                    }
                });
            }
        }
    }
    downsample() {
        if (this.waveFormData.length <= this.sampleSize) {
            return this.waveFormData;
        }
        if (this.sampleSize === 1)
            return [this.mean(this.waveFormData)];
        const result = [];
        // bucket size adjusted due to the fact that the first and the last item in the original data array is kept in target output
        const bucketSize = (this.waveFormData.length - 2) / (this.sampleSize - 2);
        let lastSelectedPointIndex = 0;
        result.push(this.waveFormData[lastSelectedPointIndex]); // Always add the first point
        let maxAreaPoint, maxArea, triangleArea;
        for (let bucketIndex = 1; bucketIndex < this.sampleSize - 1; bucketIndex++) {
            const previousBucketRefPoint = this.waveFormData[lastSelectedPointIndex];
            const nextBucketMean = this.getNextBucketMean(this.waveFormData, bucketIndex, bucketSize);
            const currentBucketStartIndex = Math.floor((bucketIndex - 1) * bucketSize) + 1;
            const nextBucketStartIndex = Math.floor(bucketIndex * bucketSize) + 1;
            const countUnitsBetweenAtoC = 1 + nextBucketStartIndex - currentBucketStartIndex;
            maxArea = triangleArea = -1;
            for (let currentPointIndex = currentBucketStartIndex; currentPointIndex < nextBucketStartIndex; currentPointIndex++) {
                const countUnitsBetweenAtoB = Math.abs(currentPointIndex - currentBucketStartIndex) + 1;
                const countUnitsBetweenBtoC = countUnitsBetweenAtoC - countUnitsBetweenAtoB;
                const currentPointValue = this.waveFormData[currentPointIndex];
                triangleArea = this.triangleAreaHeron(this.triangleBase(Math.abs(previousBucketRefPoint - currentPointValue), countUnitsBetweenAtoB), this.triangleBase(Math.abs(currentPointValue - nextBucketMean), countUnitsBetweenBtoC), this.triangleBase(Math.abs(previousBucketRefPoint - nextBucketMean), countUnitsBetweenAtoC));
                if (triangleArea > maxArea) {
                    maxArea = triangleArea;
                    maxAreaPoint = this.waveFormData[currentPointIndex];
                    lastSelectedPointIndex = currentPointIndex;
                }
            }
            if (typeof maxAreaPoint !== 'undefined')
                result.push(maxAreaPoint);
        }
        result.push(this.waveFormData[this.waveFormData.length - 1]); // Always add the last point
        return result;
    }
}
VoiceRecordingWavebarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: VoiceRecordingWavebarComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
VoiceRecordingWavebarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: VoiceRecordingWavebarComponent, selector: "stream-voice-recording-wavebar", inputs: { audioElement: "audioElement", waveFormData: "waveFormData", duration: "duration" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<!--eslint-disable @angular-eslint/template/click-events-have-key-events-->\n<div\n  #container\n  class=\"str-chat__wave-progress-bar__track\"\n  data-testid=\"wave-progress-bar-track\"\n  role=\"progressbar\"\n  (mousedown)=\"isDragging = true\"\n  (mouseup)=\"isDragging = false\"\n  (mouseleave)=\"isDragging = false\"\n  (mousemove)=\"isDragging ? seek($event) : null\"\n  (click)=\"seek($event)\"\n>\n  <!--eslint-enable @angular-eslint/template/click-events-have-key-events-->\n  <div\n    *ngFor=\"\n      let dataPoint of resampledWaveFormData;\n      let i = index;\n      trackBy: trackByIndex\n    \"\n    class=\"str-chat__wave-progress-bar__amplitude-bar\"\n    [class.str-chat__wave-progress-bar__amplitude-bar--active]=\"\n      progress > i / resampledWaveFormData.length\n    \"\n    [style.--str-chat__wave-progress-bar__amplitude-bar-height]=\"\n      dataPoint ? dataPoint * 100 + '%' : '0%'\n    \"\n  ></div>\n  <div\n    class=\"str-chat__wave-progress-bar__progress-indicator\"\n    data-testid=\"wave-progress-bar-progress-indicator\"\n    [ngStyle]=\"{ 'inset-inline-start': progress * 100 + '%' }\"\n  ></div>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: VoiceRecordingWavebarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'stream-voice-recording-wavebar', template: "<!--eslint-disable @angular-eslint/template/click-events-have-key-events-->\n<div\n  #container\n  class=\"str-chat__wave-progress-bar__track\"\n  data-testid=\"wave-progress-bar-track\"\n  role=\"progressbar\"\n  (mousedown)=\"isDragging = true\"\n  (mouseup)=\"isDragging = false\"\n  (mouseleave)=\"isDragging = false\"\n  (mousemove)=\"isDragging ? seek($event) : null\"\n  (click)=\"seek($event)\"\n>\n  <!--eslint-enable @angular-eslint/template/click-events-have-key-events-->\n  <div\n    *ngFor=\"\n      let dataPoint of resampledWaveFormData;\n      let i = index;\n      trackBy: trackByIndex\n    \"\n    class=\"str-chat__wave-progress-bar__amplitude-bar\"\n    [class.str-chat__wave-progress-bar__amplitude-bar--active]=\"\n      progress > i / resampledWaveFormData.length\n    \"\n    [style.--str-chat__wave-progress-bar__amplitude-bar-height]=\"\n      dataPoint ? dataPoint * 100 + '%' : '0%'\n    \"\n  ></div>\n  <div\n    class=\"str-chat__wave-progress-bar__progress-indicator\"\n    data-testid=\"wave-progress-bar-progress-indicator\"\n    [ngStyle]=\"{ 'inset-inline-start': progress * 100 + '%' }\"\n  ></div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { audioElement: [{
                type: Input
            }], waveFormData: [{
                type: Input
            }], duration: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ['container', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,